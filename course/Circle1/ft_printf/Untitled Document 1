#include "get_next_line.h"
int where_nexline(char *s)
{
    int i;
    i = 0;
    while(s[i])
    {
        if(s[i] == '\n')
            return (i);
        i ++;
    }
    return (-1);
}
#include<stdio.h>
char    *lets_read(char *what_i_read, int fd, int *newline, char **temp) 
{
    char    buffer[BUFFER_SIZE + 1];
    int how_much_read;

    if (fd < 0 || BUFFER_SIZE <= 0)
        return (NULL);
    if (what_i_read == NULL)
        what_i_read = ft_strdup("");
    int j;
    j = 0;
    while(1)
    {
        how_much_read = read(fd, buffer, BUFFER_SIZE);
        printf("%d 번째 how_much_read : %d\n", j, how_much_read);
  
        if (how_much_read >= 0) //읽기 성공
        {    buffer[how_much_read] = '\0'; // 성공 후 '\0'을 넣는다.
            printf("%d 번째 buffer : %s\n", j, buffer);
        }
        if (how_much_read == -1 || (how_much_read == 0 && buffer[0] == '\0'))//(읽기 실패 || EOF일때)
        {
            printf("조건문 들어온 %s\n", what_i_read);
            temp = what_i_read;
            printf("temp의 값 : %s\n", temp);
            free(what_i_read);
            return (NULL);
        }
        what_i_read = ft_strjoin(what_i_read, buffer);
        printf("%d 번째 what_i_read : %s\n", j, what_i_read);
        *newline = where_nexline(what_i_read);
        printf("%d 번째 newline : %d\n", j, *newline);
        if(*newline != -1 || (how_much_read < BUFFER_SIZE)) // (개행이 있을때 || EOF)
        {
            return (what_i_read);
        }
        j ++;
    }
    return (NULL);
}

char	*get_next_line_ver2(int fd)
{
	static char	*what_i_read;
    char    *result;
    char    *temp="";
    int newline;

    what_i_read = lets_read(what_i_read, fd, &newline, &temp);
    printf("메인 함수에서의 what_i_read : %s\n", what_i_read);
    printf("메인 함수에서의 new_line : %d\n", newline);
    printf("메인 함수에서의 temp의 값 : %s\n", temp);
    if (newline == -1)
    {
        return (what_i_read);
    }
    result = ft_substr(what_i_read, 0, newline + 1);
    printf("result = %s\n", result);
    what_i_read = ft_substr(what_i_read, newline + 1, ft_strlen(what_i_read));
    printf("what_i_read = %s\n", what_i_read);
    return (result);
}

int	main(void)
{
	int 	fd;
	char	*line;
	fd = open("./test.txt", O_RDONLY);
	while (line = get_next_line_ver2(fd))
	{
		printf("결과 : %s\n", line);
		free(line);
		//system("leaks a.out > leaks_result_temp; cat leaks_result_temp | grep leaked && rm -rf leaks_result_temp");
	}
	return 0;
}
